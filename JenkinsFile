properties([
    parameters([
        string(name: 'PORT', defaultValue: "3001", description: 'Port?'),
        string(name: 'CONTAINER_NAME', defaultValue: 'jsauth', description: 'Application Name (used as container name, no spaces or symboles)?'),
        string(name: 'IMAGE_NAME', defaultValue: 'jsauth', description: "Docker Image Name")
    ])
])
node ('docker'){
    checkout scm
    
        env.DOCKER_IMAGE_VERSION="0.1"

        stage('Build') {
                env.NODEJS_HOME = "${tool 'NodeJS 14.16'}"
    // on linux / mac
                env.PATH="${env.NODEJS_HOME}/bin:${env.PATH}"
                //run linting
                //sh 'npm run lint'

                //run unit tests
                sh 'npm --version'
                sh 'npm run test'

                if(env.BRANCH_NAME =='master'){
                    //pack the project
                    sh 'npm pack'
                    sh 'ls'
                    sh 'ls  | grep *.tgz'
                }

                try{
               
                    
                def access = 'test'
                def refresh = 'test2'
                //build the docker image
                sh """
                docker build \
                --build-arg APP_NAME=${params.CONTAINER_NAME} \
                --build-arg ARG_ACCESS_TOKEN_SECRET=${access} \
                --build-arg ARG_REFRESH_TOKEN_SECRET=${refresh} \
                -t ${params.IMAGE_NAME}-${params.CONTAINER_NAME}:${DOCKER_IMAGE_VERSION} .
                """
                }
                finally
                {
                    //deleteDir()
                }           
                                


            
        }
        stage('Deploy') {
            if(env.BRANCH_NAME =='master'){
                //pass prod environment file
            }else {
                 //pass non-prod environment file

            }


                sh "docker run --name ${params.CONTAINER_NAME} -p ${PORT}:${PORT} -d --restart unless-stopped ${params.IMAGE_NAME}-${params.CONTAINER_NAME}:${DOCKER_IMAGE_VERSION}"
            
        }
        

           if(env.BRANCH_NAME =='master'){
              stage('Performance Test') {
               //run jMeter script if we are deploying to prod
            echo "Run jMeter Script"
            }
           } 
           stage('Functional Test') {
           //run postman script
           echo "Run Postman collection"
        }

        
    
}