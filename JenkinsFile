properties([
    parameters([
        string(name: 'PORT', defaultValue: "3001", description: 'Port?'),
        string(name: 'CONTAINER_NAME', defaultValue: 'jsauth', description: 'Application Name (used as container name, no spaces or symboles)?'),
        string(name: 'IMAGE_NAME', defaultValue: 'jsauth', description: "Docker Image Name")
    ])
])
env.DOCKER_IMAGE_VERSION="0.1"

if(env.BRANCH_NAME =='master'){
    node ('docker'){
        env.NODEJS_HOME = "${tool 'NodeJS 14.16'}"
        env.PATH="${env.NODEJS_HOME}/bin:${env.PATH}"
        checkout scm
        stage('Build') {

                sh 'node --version'
                sh 'npm --version'

                

                //populate the package directory for building   
                sh "chmod a+rx build_JSAuth.sh"
                sh "./build_JSAuth.sh"

                try{
                def ACCESS = 'test'
                def REFRESH = 'test2'

                //build the docker image
                sh """
                docker build \
                --build-arg APP_NAME=${params.CONTAINER_NAME} \
                --build-arg ARG_ACCESS_TOKEN_SECRET=${ACCESS} \
                --build-arg ARG_REFRESH_TOKEN_SECRET=${REFRESH} \
                -t ${params.IMAGE_NAME}-${params.CONTAINER_NAME}:${DOCKER_IMAGE_VERSION} .
                """
                }
                finally
                {
                    deleteDir()
                }           
        }

        stage('Deploy') {
            if(env.BRANCH_NAME =='master'){
                //pass prod environment file
            }
            sh "docker run --name ${params.CONTAINER_NAME} -p ${PORT}:${PORT} -d --restart unless-stopped ${params.IMAGE_NAME}-${params.CONTAINER_NAME}:${DOCKER_IMAGE_VERSION}"
        }
    }
}
        
//run test via test tools from master
node ('docker'){
    echo "Start Testing Phase"
    env.NODEJS_HOME = "${tool 'NodeJS-Postman'}"
    env.PATH="${env.NODEJS_HOME}/bin:${env.PATH}"
    if(env.BRANCH_NAME =='master'){
        stage('Performance Test') {
            //run jMeter script if we are deploying to prod
            echo "Run jMeter Script"
        }
    } 
    stage('Functional Test') {
        //checkout test cases from the test case repo: https://github.com/m-const/JSAuthTests.git
        sh "mkdir postman"
        dir("postman"){
            try{
            checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/m-const/JSAuthTests.git']]])
            sh "ls -ltr"
            //run postman script
            echo "Run Postman collection"
            sh "newman run JSAuth.postman_collection.json -e JS_Auth_Prod.postman_environment.json"
            }
            finally
            {
                deleteDir()
            }  
        }
    }

}
        
    
