properties([
    parameters([
        string(name: 'CONTAINER_NAME', defaultValue: 'jsauth', description: 'Application Name (used as container name, no spaces or symboles)?'),
        string(name: 'IMAGE_NAME', defaultValue: 'jsauth', description: "Docker Image Name"),
        booleanParam(name: 'DOCKER_RM', defaultValue: true, description: 'Remove other containers using the same name as the above provided container name')
    ])
])
env.DOCKER_IMAGE_VERSION="0.1"
def ACCESS = 'test';
def REFRESH = 'test2';
def PORT = 3001;
def INSTANCES = 4
if(env.BRANCH_NAME =='master'){
    node ('docker'){
        env.NODEJS_HOME = "${tool 'NodeJS 14.16'}"
        env.PATH="${env.NODEJS_HOME}/bin:${env.PATH}"
        checkout scm
        stage('Build') {
                sh 'node --version'
                sh 'npm --version'

                //populate the package directory for building   
                sh "chmod a+rx build_JSAuth.sh"
                sh "./build_JSAuth.sh"

                    //sonarqube scan
                withSonarQubeEnv(credentialsId: 'sonarqube-jenkins') {
                sonar-scanner \
                    -Dsonar.projectKey=JSAuth \
                    -Dsonar.sources=. \
                    -Dsonar.host.url=http://192.168.0.126:9000 \
                    -Dsonar.login=8123e0d07f717da1ed8c11c109ab3807efed8af6
                }

                try{
              
                //build the docker image
                sh """
                docker build \
                --build-arg APP_NAME=${params.CONTAINER_NAME}\
                --build-arg ARG_ACCESS_TOKEN_SECRET=${ACCESS} \
                --build-arg APP_PORT=${PORT} \
                --build-arg ARG_REFRESH_TOKEN_SECRET=${REFRESH} \
                -t ${params.IMAGE_NAME}-${params.CONTAINER_NAME}:${DOCKER_IMAGE_VERSION} .
                """
                  
                }
                finally
                {
                    deleteDir()
                }           
        }

        stage('Deploy') {
            
            def EXPOSEDPORT = PORT;
            for(int i=0;i < INSTANCES;i++){
                if(params.DOCKER_RM){
                echo "Deleting other container with the same container name: ${params.CONTAINER_NAME}_${i}"
                 sh "docker rm ${params.CONTAINER_NAME}_${i} -f || exit 0"
            }
                sh "docker run --name ${params.CONTAINER_NAME}_${i} -p ${EXPOSEDPORT}:${PORT} -d --restart unless-stopped ${params.IMAGE_NAME}-${params.CONTAINER_NAME}:${DOCKER_IMAGE_VERSION}"
                EXPOSEDPORT++;
            }
        }
    }
}
        
//run test via test tools from master
node ('docker'){
    sleep(90)
    echo "Start Testing Phase"
    env.NODEJS_HOME = "${tool 'NodeJS-Postman'}"
    env.PATH="${env.NODEJS_HOME}/bin:${env.PATH}"
    if(env.BRANCH_NAME =='master'){
        stage('Performance Test') {
            //run jMeter script if we are deploying to prod
            echo "Run jMeter Script"
        }
    } 
    stage('Functional Test') {
        //checkout test cases from the test case repo: https://github.com/m-const/JSAuthTests.git
        sh "mkdir postman"
        dir("postman"){
            try{
            checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/m-const/JSAuthTests.git']]])
            sh "ls -ltr"
            //run postman script
            echo "Run Postman collection"
            sh "newman run JSAuth.postman_collection.json -e JS_Auth_Prod.postman_environment.json --reporters cli,json --reporter-cli --reporter-json-export result.json"
            archiveArtifacts artifacts: 'result.json', fingerprint: true
            }
            finally
            {
                deleteDir()
            }  
        }
    }

}
        
    
